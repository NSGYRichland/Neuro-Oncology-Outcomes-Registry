@*@model Tuple<TumorTaskforce_Webapp_1.Patient, IEnumerable<TumorTaskforce_Webapp_1.Patient>>

@{
    ViewBag.Title = "Results";

    Patient target = new Patient();
    int targetSimilarity = 0;
    int currEffect = 0, targetEffect = 0;
    String targetRecord = "000000000000000000";

    foreach (var curr in Model.Item2)
    {
        int similarity = 0, i = 0;
        String record = "000000000000000000";
        if (Model.patientID == curr.patientID)
        {
            continue;
        }
        else
        {
            @*double tVol = 0, currVol = 0;
                tVol = (double)(Model.TumorHeight * Model.TumorLength * Model.TumorWidth);
                currVol = (double)(curr.TumorHeight * curr.TumorLength * curr.TumorWidth);* @
            if (Model.Sex.Equals(curr.Sex))
            {
                similarity++;
                record = record.Insert(0, "1");
            }
            if (Model.Age == curr.Age)
            {
                similarity++;
                record = record.Insert(1, "1");
            }
            if (Model.HistologicalClassification.Equals(curr.HistologicalClassification))
            {
                i = 3;
                record = record.Insert(2, "1");
                if (Model.HistologicalGrade >= curr.HistologicalGrade)
                {
                    i++;
                    record = record.Insert(3, "1");
                    if (Model.HistologicalGrade == curr.HistologicalGrade)
                    {
                        i++;
                        record = record.Insert(4, "1");

                    }
                }
                similarity += i;
                i = 0;
            }
            if (Model.TumorLength == curr.TumorLength)
            {
                similarity++;
                record = record.Insert(5, "1");
            }
            if (Model.TumorWidth == curr.TumorWidth)
            {
                similarity++;
                record = record.Insert(6, "1");
            }
            if (Model.TumorHeight == curr.TumorHeight)
            {
                similarity++;
                record = record.Insert(7, "1");
            }
            if (Model.TumorLocation.Equals(curr.TumorLocation))
            {
                similarity += 3;
                record = record.Insert(8, "1");
            }
            try
            {

                if (!Model.Constitutional.IsEmpty()
                    & !Model.Constitutional.Equals("normal"))
                {
                    if (Model.Constitutional.Equals(curr.Constitutional))
                    {
                        similarity++;
                        record = record.Insert(9, "1");
                    }
                }
                if (!Model.Respiratory.IsEmpty()
                    & !Model.Respiratory.Equals("normal"))
                {
                    if (Model.Respiratory.Equals(curr.Respiratory))
                    {
                        similarity++;
                        record = record.Insert(10, "1");
                    }
                }
                if (!Model.Cardiovascular.IsEmpty()
                    & !Model.Cardiovascular.Equals("normal"))
                {
                    if (Model.Cardiovascular.Equals(curr.Cardiovascular))
                    {
                        similarity++;
                        record = record.Insert(11, "1");
                    }
                }
                if (!Model.Gastrointestinal.IsEmpty()
                    & !Model.Gastrointestinal.Equals("normal"))
                {
                    if (Model.Gastrointestinal.Equals(curr.Gastrointestinal))
                    {
                        similarity++;
                        record = record.Insert(12, "1");
                    }
                }
                if (!Model.Musculoskeletal.IsEmpty()
                    & !Model.Musculoskeletal.Equals("normal"))
                {
                    if (Model.Musculoskeletal.Equals(curr.Musculoskeletal))
                    {
                        similarity++;
                        record = record.Insert(13, "1");
                    }
                }
                if (!Model.Integumentary.IsEmpty()
                    & !Model.Integumentary.Equals("normal"))
                {
                    if (Model.Integumentary.Equals(curr.Integumentary))
                    {
                        similarity++;
                        record = record.Insert(14, "1");
                    }
                }
                if (!Model.Neurologic.IsEmpty()
                    & !Model.Neurologic.Equals("normal"))
                {
                    if (Model.Neurologic.Equals(curr.Neurologic))
                    {
                        similarity++;
                        record = record.Insert(15, "1");
                    }
                }
                if (!Model.Exercize.IsEmpty()
                    & !Model.Exercize.Equals("normal"))
                {
                    if (Model.Exercize.Equals(curr.Exercize))
                    {
                        similarity++;
                        record = record.Insert(16, "1");
                    }
                }
                if (!Model.Diet.IsEmpty()
                    & !Model.Diet.Equals("normal"))
                {
                    if (Model.Diet.Equals(curr.Diet))
                    {
                        similarity++;
                        record = record.Insert(17, "1");
                    }
                }
            }
            catch (NullReferenceException e) { }


        }

        if (similarity > targetSimilarity)
        {
            target = curr;
            targetSimilarity = similarity;
            targetRecord = record;
        }
        else if (similarity == targetSimilarity)
        {
            currEffect = 0;
            targetEffect = 0;
            foreach (TreatmentsPivot sp in curr.TreatmentsPivots)
            {
                currEffect += sp.effectiveness;
            }
            foreach (TreatmentsPivot sp in target.TreatmentsPivots)
            {
                targetEffect += sp.effectiveness;
            }
            if (currEffect > targetEffect)
            {
                target = curr;
                targetRecord = record;
            }
        }
        @*<text> Patient: </text><span>@curr.patientID</span><text> | Sim: </text><span>@similarity</span><text> | Record: </text><span>@record</span><text> | Effect: </text><span>@currEffect</span><br />* @

    }
}*@

@model TumorTaskforce_Webapp_1.Patient
@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "Results";
}
<div class="jumbotron">
    <h1>Results</h1>
    <p class="lead"></p>
</div>

@if (User.Identity.IsAuthenticated && (ViewBag.displayMenu == "Yes" || Model.userName==User.Identity.GetUserName()))
{
    <div>
        <h2>Patient Comparison Results</h2>
        <hr />
        <h4>
            Results:
        </h4>
        We recommend the following treatments:

		<dl class="dl-horizontal">
			@*@Html.DisplayFor(i => i.comparisonResults)*@
				@foreach (TreatmentsPivot sp in target.TreatmentsPivots)
		{
			@Html.DisplayFor(spitem => sp.PossibleTreatment.Name)
	if (sp.date != null)
	{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.date)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.date)
}
if (sp.frequency != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.frequency)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.frequency)
}
if (sp.notes != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.notes)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.notes)
}
if (sp.effectiveness != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.effectiveness)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.effectiveness)
}

		<br />
}
				<br />
			</dd>














			<br /
			<dt></dt>
			@*Data is based on a statistical correlation with: Patient @target.patientID | @targetSimilarity | @targetEffect*@
			<hr />
			<dt>
				Patient  Info
			</dt>
			<dd>
				------------------------------
			</dd>
			<dt>
				@Html.DisplayNameFor(model => model.Sex)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Sex)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Married)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Married)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Age)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Age)
			</dd>

			<dt>
				Classification
			</dt>

			<dd>
				@Html.DisplayFor(model => model.HistologicalClassification)
			</dd>

			<dt>
				Grade (WHO)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.HistologicalGrade)
			</dd>

			<dt>
				Tumor Size (WxHxL)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.TumorWidth)
				x
				@Html.DisplayFor(model => model.TumorHeight)
				x
				@Html.DisplayFor(model => model.TumorLength)
			</dd>

			@*<dt>
			@Html.DisplayNameFor(model => model.TumorHeight)
		</dt>

		<dd>
			@Html.DisplayFor(model => model.TumorHeight)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.TumorLength)
		</dt>

		<dd>
			@Html.DisplayFor(model => model.TumorLength)
		</dd>*@

			<dt>
				Location
			</dt>

			<dd>
				@Html.DisplayFor(model => model.TumorLocation)
			</dd>

			<dt>
				<br />------------------------------ <br />
				<br />Review of Systems<br />

				@Html.DisplayNameFor(model => model.Constitutional)
			</dt>

			<dd>

				@Html.DisplayFor(model => model.Constitutional)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Respiratory)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Respiratory)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Cardiovascular)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Cardiovascular)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Gastrointestinal)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Gastrointestinal)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Musculoskeletal)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Musculoskeletal)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Integumentary)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Integumentary)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Neurologic)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Neurologic)
			</dd>

			<dt>
				Exercise
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Exercize)
			</dd>

			<dt>
				@Html.DisplayNameFor(model => model.Diet)
			</dt>

			<dd>
				@Html.DisplayFor(model => model.Diet)
			</dd>

			<dt>
				<br />
				Symptoms
			</dt>

			<dd>
				<br />
				@foreach (SymptomsPivot sp in Model.SymptomsPivots)
		{
			@Html.DisplayFor(spitem => sp.PossibleSymptom.Name)

	if (sp.date != null)
	{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.date)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.date)
}
if (sp.frequency != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.frequency)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.frequency)
}
if (sp.notes != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.notes)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.notes)
}

		<br />
}
				<br />
			</dd>

			<dt>
				<br />
				Other Medications
			</dt>

			<dd>
				<br />
				@foreach (OtherMedsPivot sp in Model.OtherMedsPivots)
		{
			@Html.DisplayFor(spitem => sp.PossibleOtherMed.Name)

	if (sp.date != null)
	{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.date)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.date)
}
if (sp.frequency != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.frequency)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.frequency)
}
if (sp.notes != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.notes)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.notes)
}
		<br />
}
				<br />
			</dd>

			<dt>
				<br />
				Health Factors
			</dt>

			<dd>
				<br />
				@foreach (HealthFactorsPivot sp in Model.HealthFactorsPivots)
		{
			@Html.DisplayFor(spitem => sp.PossibleHealthFactor.Name)
	if (sp.date != null)
	{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.date)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.date)
}
if (sp.frequency != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.frequency)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.frequency)
}
if (sp.notes != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.notes)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.notes)
}
		<br />
}
				<br />
			</dd>

			<dt>
				<br />
				Treatments Given
			</dt>

			<dd>
				<br />
				@foreach (TreatmentsPivot sp in Model.TreatmentsPivots)
		{
			@Html.DisplayFor(spitem => sp.PossibleTreatment.Name)
	if (sp.date != null)
	{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.date)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.date)
}
if (sp.frequency != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.frequency)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.frequency)
}
if (sp.notes != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.notes)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.notes)
}
if (sp.effectiveness != null)
{
		<tag> // </tag>
		@Html.DisplayNameFor(spitem => sp.effectiveness)
		<tag>: </tag>
		@Html.DisplayFor(spitem => sp.effectiveness)
}

		<br />
}
				<br />
			</dd>

		</dl>
    </div>






    @*<h2>Details</h2>

        <div>
            <h4>Results</h4>
            <hr />
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.Sex)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Sex)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Married)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Married)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Age)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Age)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.HistologicalClassification)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.HistologicalClassification)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.HistologicalGrade)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.HistologicalGrade)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.TumorWidth)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.TumorWidth)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.TumorHeight)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.TumorHeight)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.TumorLength)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.TumorLength)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.TumorLocation)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.TumorLocation)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Constitutional)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Constitutional)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Respiratory)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Respiratory)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Cardiovascular)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Cardiovascular)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Gastrointestinal)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Gastrointestinal)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Musculoskeletal)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Musculoskeletal)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Integumentary)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Integumentary)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Neurologic)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Neurologic)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Exercize)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Exercize)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Diet)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Diet)
                </dd>

            </dl>
        </div>
        <p>
            @Html.ActionLink("Edit", "Edit", new { id = Model.patientID }) |
            @Html.ActionLink("Back to List", "Compare")
        </p>*@

}
else
{
    <h2>  Unauthorized. </h2>
    <h3>
        Please log in or register to access this page.
    </h3>
}



