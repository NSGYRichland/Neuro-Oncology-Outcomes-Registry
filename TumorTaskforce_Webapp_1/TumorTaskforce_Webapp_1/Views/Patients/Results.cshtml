@model TumorTaskforce_Webapp_1.Patient
@using Microsoft.AspNet.Identity


@*changes the background color of our home page to teal*@
<style>
	body {
		background: #89cdce;
		margin: auto;
		width: 960px;
	}
</style>



@{
    ViewBag.Title = "Results";
    int sIndex = Model.comparisonResults.IndexOf('|');//Find first index of parce variable |
    int lIndex = Model.comparisonResults.LastIndexOf('|');//Find last parse varible | 
    char[] count = new char[sIndex];//create a char[] for the Database size data within comparisonResults 
    char[] targetCount = new char[((lIndex-1)-sIndex)];//The second is for the most similar Patient ID saved in ComparisonResults 
    Model.comparisonResults.CopyTo(0, count, 0, sIndex);//Use copyTo, to copy correct indexes to these respective character arrays 
    Model.comparisonResults.CopyTo(sIndex + 1, targetCount, 0, ((lIndex - 1) - sIndex));
    string str = new string(count);//cast character array into string 
    string Tstr = new string(targetCount);//cast character array into string 
    int arraySize = int.Parse(str);//Parse string into an integer 
    int targetID = int.Parse(Tstr);//Parse string into an integer 
    //int[] dataArray = new int[arraySize * 2];
    //dataArray = ViewBag.SimData as int[];
    int targetSim = 0;//Use the PatientID to find the most similar patients Similairty by parsting through the SimilarityData added to Viewbag
    for(int i = 0; i < ViewBag.SimData.Length; i+=2)//Id's are only in even number index's 
    {
        if(ViewBag.SimData[i] == targetID)
        {
            targetSim = i;//found the ID
        }
    }
    targetSim = ViewBag.SimData[targetSim + 1];//That patients ID is directly in the next index. 
}

<script type="text/javascript" src="https://www.amcharts.com/lib/3/amcharts.js"></script>
<script type="text/javascript" src="https://www.amcharts.com/lib/3/serial.js"></script>



<script type="text/javascript">
	AmCharts.makeChart("chartdiv",
		{
			"type": "serial",
			"categoryField": "category",
			"startDuration": 1,
			"categoryAxis": {
				"gridPosition": "start",
				"title": "Patient ID"
			},
			"trendLines": [],
			"graphs": [
				{
					"balloonText": "[[title]] of [[category]]:[[value]]",
					"bullet": "round",
					"id": "AmGraph-1",
					"title": "Charted Similarities",
					"valueField": "column-1"
				}
			],
			"guides": [],
			"valueAxes": [
				{
					"id": "ValueAxis-1",
					"maximum": 100,
					"minimum": 0,
					"strictMinMax": true,
					"synchronizationMultiplier": 0,
					"gridAlpha": 0.1,
					"minVerticalGap": 39,
					"title": "% Similar"
				}
			],
			"allLabels": [],
			"balloon": {},
			"legend": {
				"enabled": true,
				"useGraphSettings": true
			},
			"titles": [
				{
					"id": "Title-1",
					"size": 15,
					"text": "Patient's Comparison Results"
				}
			],
            "dataProvider": [
				{
                    "category": "Patient " + @targetID,//Dynamically put all that info into the graph 
                    "column-1": @targetSim
				},
				{
                    "category": "Patient " + @ViewBag.SimData[2],//Display a couple more patients for s good graph 
                    "column-1": @ViewBag.SimData[3]
				},
				{
                    "category": "Patient " + @ViewBag.SimData[4],
                    "column-1": @ViewBag.SimData[5]
				},
				{
                    "category": "Patient " + @ViewBag.SimData[6],
                    "column-1": @ViewBag.SimData[7]
				},
				{
                    "category": "Patient " + @ViewBag.SimData[8],
                    "column-1": @ViewBag.SimData[9]
				},
				{
                    "category": "Patient " + @ViewBag.SimData[10],
                    "column-1": @ViewBag.SimData[11]
				},
				{
                    "category": "Patient " + @ViewBag.SimData[12],
                    "column-1": @ViewBag.SimData[13]
				},
                {
                    "category": "Patient " + @ViewBag.SimData[14],
                    "column-1": @ViewBag.SimData[15] //Just first 7 patients for now but is dynamic
                },
                {
                    "category": "Patient " + @ViewBag.SimData[16],
                    "column-1": @ViewBag.SimData[17]
                }
			]
		}
	);
</script>

<div class="jumbotron">
	<h1>Results</h1>
	<p class="lead"></p>
</div>

@if (User.Identity.IsAuthenticated && (ViewBag.displayMenu == "Yes" || Model.userName == User.Identity.GetUserName()))
{
	<div>
		<h2>Patient Comparison Results</h2>
		<hr />
		<h4>
			Results:
		</h4>
		We recommend the following treatments:
		@ViewBag.CompResults
		@*Chart Printed Out on Results Page Showing the Current Patient's Level of Similarity to Other Patients in the Database*@
		<div id="chartdiv" style="width: 100%; height: 400px; background-color: #FFFFFF;"></div>


		@*go through each variable and if index in the array of that variable is similar, highlight variable when printed out*@
		@*highlight variables that are similar, otherwie print out not highlighted
			if(record[1]==1)
			{
				<p style="background-color: #FFFF00"> model.Sex </p>
			}
			else
			{
				@html.DisplayNameFor(model => model.Sex)
			}	*@



		@*Data is based on a statistical correlation with: Patient @target.patientID | @targetSimilarity | @targetEffect*@
		<hr />
        <div class="row">
            <div class="col-md-4">
                <b>Patient Info</b>
                @Html.ActionLink("(Edit)", "Edit", new { id = Model.patientID })
                <hr />
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.Sex)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Sex)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Age)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Age)
                    </dd>

                    <dt>
                        Race
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Integumentary)
                    </dd>

                    <dt>
                        Deceased
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Married)
                    </dd>

                    <dt>
                        BMI
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Diet)
                    </dd>

                    <dt>
                        ASA
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Exercize)
                    </dd>

                    <dt>
                        CCI
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Gastrointestinal)
                    </dd>

                    <dt>
                        KPS
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Constitutional)
                    </dd>
                </dl>
            </div>
            <div class="col-md-4">
                <b>Tumor Info</b>
                @Html.ActionLink("(Edit)", "Edit", new { id = Model.patientID })
                <hr />
                <dl class="dl-horizontal">
                    <dt>
                        Classification
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.HistologicalClassification)
                    </dd>

                    <dt>
                        Grade (WHO)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.HistologicalGrade)
                    </dd>

                    <dt>
                        Tumor Size (WxHxL)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.TumorWidth)
                        x
                        @Html.DisplayFor(model => model.TumorHeight)
                        x
                        @Html.DisplayFor(model => model.TumorLength)
                    </dd>

                    <dt>
                        Location
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.TumorLocation)
                    </dd>
                </dl>
            </div>
            <div class="col-md-4">
                <b>Review of Systems</b>
                @Html.ActionLink("(Edit)", "Edit", new { id = Model.patientID })
                <hr />
                <dl class="dl-horizontal">

                    <dt>
                        @Html.DisplayNameFor(model => model.Respiratory)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Respiratory)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Cardiovascular)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Cardiovascular)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Musculoskeletal)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Musculoskeletal)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Neurologic)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Neurologic)
                    </dd>
                </dl>
            </div>
        </div>
        <hr />
		<dl class="dl-horizontal">
			<dt>
				Symptoms
			</dt>

			<dd>
				<br />
				@foreach (SymptomsPivot sp in Model.SymptomsPivots)
				{
					@Html.DisplayFor(spitem => sp.PossibleSymptom.Name)

					if (sp.date != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.date)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.date)
					}
					if (sp.frequency != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.frequency)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.frequency)
					}
					if (sp.notes != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.notes)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.notes)
					}

					<br />
				}
				<br />
			</dd>

			<dt>
				<br />
				Other Medications
			</dt>

			<dd>
				<br />
				@foreach (OtherMedsPivot sp in Model.OtherMedsPivots)
				{
					@Html.DisplayFor(spitem => sp.PossibleOtherMed.Name)

					if (sp.date != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.date)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.date)
					}
					if (sp.frequency != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.frequency)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.frequency)
					}
					if (sp.notes != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.notes)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.notes)
					}
					<br />
				}
				<br />
			</dd>

			<dt>
				<br />
				Health Factors
			</dt>

			<dd>
				<br />
				@foreach (HealthFactorsPivot sp in Model.HealthFactorsPivots)
				{
					@Html.DisplayFor(spitem => sp.PossibleHealthFactor.Name)
					if (sp.date != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.date)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.date)
					}
					if (sp.frequency != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.frequency)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.frequency)
					}
					if (sp.notes != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.notes)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.notes)
					}
					<br />
				}
				<br />
			</dd>

			<dt>
				<br />
				Treatments Given
			</dt>

			<dd>
				<br />
				@foreach (TreatmentsPivot sp in Model.TreatmentsPivots)
				{
					@Html.DisplayFor(spitem => sp.PossibleTreatment.Name)
					if (sp.date != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.date)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.date)
					}
					if (sp.frequency != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.frequency)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.frequency)
					}
					if (sp.notes != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.notes)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.notes)
					}
					if (sp.effectiveness != null)
					{
						<tag> // </tag>
						@Html.DisplayNameFor(spitem => sp.effectiveness)
						<tag>: </tag>
						@Html.DisplayFor(spitem => sp.effectiveness)
					}

					<br />
				}
				<br />
			</dd>

		</dl>
	</div>

}
else
{
	<h2>  Unauthorized. </h2>
	<h3>
		Please log in or register to access this page.
	</h3>
}



